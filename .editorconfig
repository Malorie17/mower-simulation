# C'est un fichier EditorConfig
# Voir https://editorconfig.org pour plus d'informations

# Racines de l'EditorConfig
root = true

# Configuration générale pour tous les fichiers (Markdown, Text, etc.)
[*]
charset = utf-8
end_of_line = lf # Préférable pour la cohérence multiplateforme (Linux/macOS/Windows)
insert_final_newline = true
trim_trailing_whitespace = true

# Configuration spécifique aux fichiers C#
[*.cs]
# Indentation
indent_style = space
indent_size = 4

# Règles de style de code (Style enforcement)
# Voir https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Utilisation implicite des directives using
csharp_style_implicit_usings_for_global_namespace = true:suggestion

# Utilisation de 'var'
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Utilisation des membres à expression body
csharp_style_expression_bodied_methods = false:none # Utilise les blocs pour les méthodes
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_properties = false:none
csharp_style_expression_bodied_accessors = false:none
csharp_style_expression_bodied_indexers = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_lambdas = false:none

# Organisation des using
csharp_style_prefer_system_directives_first = true:suggestion
csharp_style_using_directives_placement = outside_namespace:suggestion

# Nullable reference types (C# 8.0+)
dotnet_style_predefined_type_for_member_access = true:suggestion
csharp_nullable_enable_directives = true:suggestion # Recommandé si tu utilises les types nuls

# Règles de nommage (Naming rules)
# Voir https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules
# Par défaut, les projets .NET appliquent des règles de nommage basiques (PascalCase pour les classes/méthodes, camelCase pour les paramètres/variables locales).
# Tu peux ajouter des règles spécifiques ici si tu en as.
# Ex:
# dotnet_naming_rule.interface_should_be_prefixed_with_i.symbols = interfaces
# dotnet_naming_rule.interface_should_be_prefixed_with_i.style = pascal_case_with_i_prefix
# dotnet_naming_rule.interface_should_be_prefixed_with_i.severity = suggestion

# Règles d'analyse de code (Code analysis rules)
# CAxxxx - Règles de qualité de code (Performance, Usability, Design, Security...)
# Voir https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/
# Niveau de gravité : error, warning, suggestion, silent, none

# Exemple : Activer des règles spécifiques
dotnet_analyzer_diagnostic.severity = suggestion # Niveau de base pour la plupart des règles
CA1001.severity = warning # Ne pas implémenter de finaliseur quand IDisposable n'est pas utilisé
CA1822.severity = warning # Les membres marqués comme statiques ne devraient pas accéder aux données d'instance
CA2200.severity = warning # Rejeter les exceptions pour préserver les détails de la pile (très important !)
CA1805.severity = suggestion # Éviter les initialisations inutiles de champs
CA2007.severity = none
CA1859.severity = none
CA1305.severity = none

# Désactiver des règles spécifiques si elles ne sont pas pertinentes pour ton projet
# CA1054.severity = none # Les paramètres d'URI ne doivent pas être des chaînes de caractères